Description: Building a complete Web Application stack using CloudFormation

Resources:
  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d5eff06f840b45e9
      InstanceType: t2.micro
      KeyName: KP-GEN
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Definir o caminho para o arquivo de log
          LOG_FILE="/var/log/userdata_execution.log"

          # Atualizar o sistema e redirecionar os logs para o arquivo
          yum update -y &>> $LOG_FILE

          amazon-linux-extras install docker -y &>> $LOG_FILE

          # Iniciar o Docker e redirecionar os logs para o arquivo
          systemctl start docker &>> $LOG_FILE

          touch home/ec2-user/script.sh &>> $LOG_FILE

          echo "#\!/bin/bash" > home/ec2-user/script.sh
          echo "release_type=\$1" >> home/ec2-user/script.sh
          echo "export AWS_ACCESS_KEY_ID=\"\"" >> home/ec2-user/script.sh
          echo "export AWS_SECRET_ACCESS_KEY=\"\"" >> home/ec2-user/script.sh
          echo "export AWS_SESSION_TOKEN=\"\"" >> home/ec2-user/script.sh
          echo "export AWS_DEFAULT_REGION=\"\"" >> home/ec2-user/script.sh
          echo "" >> home/ec2-user/script.sh
          echo "AWS_ECR_PASSWORD=\$(aws ecr get-login-password)" >> home/ec2-user/script.sh
          echo "" >> home/ec2-user/script.sh
          echo "sudo docker stop \$(docker ps -aq)" >> home/ec2-user/script.sh
          echo "" >> home/ec2-user/script.sh
          echo "sudo docker system prune -f" >> home/ec2-user/script.sh
          echo "" >> home/ec2-user/script.sh
          echo "# Login no Docker com credenciais do ECR" >> home/ec2-user/script.sh
          echo "echo \$AWS_ECR_PASSWORD | sudo docker login --username AWS --password-stdin 713621535342.dkr.ecr.us-east-1.amazonaws.com" >> home/ec2-user/script.sh
          echo "sudo docker pull 713621535342.dkr.ecr.us-east-1.amazonaws.com/builds:\$release_type" >> home/ec2-user/script.sh
          echo "" >> home/ec2-user/script.sh
          echo "sudo docker run -d --env-file .env -p 8080:8080 713621535342.dkr.ecr.us-east-1.amazonaws.com/builds:\$release_type" >> home/ec2-user/script.sh
        # Fn::Base64: !Sub |
        #   #!/bin/bash

        #   # Definir o caminho do arquivo de log
        #   LOG_FILE="/var/log/userdata_execution.log"

        #   # Atualizar o sistema e redirecionar os logs para o arquivo
        #   yum update -y &>> $LOG_FILE

        #   # Instalar o Docker e redirecionar os logs para o arquivo
        #   amazon-linux-extras install docker -y &>> $LOG_FILE

        #   # Iniciar o Docker e redirecionar os logs para o arquivo
        #   systemctl start docker &>> $LOG_FILE

        #   # Fazer login no ECR e redirecionar os logs para o arquivo
        #   aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${RegistryUri} &>> $LOG_FILE

        #   # Executar a imagem Docker a partir do ECR e redirecionar os logs para o arquivo
        #   docker run -d ${RegistryUri}/builds:${ImageTag} &>> $LOG_FILE
          
        # Fn::Base64: |
        #   #!/bin/bash -xe
        #   LOG_FILE="/var/log/userdata_execution.log"
        #   {
        #     # Defina o diretório de trabalho
        #     WORK_DIR="$HOME/cf-with-actions"

        #     # Atualize o sistema e instale pacotes
        #     sudo yum update -y
        #     sudo yum install -y golang git

        #     # Clone o repositório
        #     echo "Clonando o repositório..." &>> $LOG_FILE
        #     git clone https://github.com/vict0rcarvalh0/cf-with-actions.git $WORK_DIR &>> $LOG_FILE

        #     # Verifique se o diretório existe
        #     if [ ! -d "$WORK_DIR" ]; then
        #       echo "Erro: O repositório não foi clonado corretamente para $WORK_DIR." &>> $LOG_FILE
        #       exit 1
        #     fi

        #     echo "Listando conteúdo do diretório clonado:" &>> $LOG_FILE
        #     ls -l $WORK_DIR &>> $LOG_FILE

        #     # Mude para o diretório do projeto
        #     echo "Mudando para o diretório do projeto..." &>> $LOG_FILE
        #     cd $WORK_DIR/sample-app &>> $LOG_FILE

        #     # Verifique se o diretório existe
        #     if [ $? -ne 0 ]; then
        #       echo "Erro: O diretório do projeto não existe em $WORK_DIR/sample-app-go." &>> $LOG_FILE
        #       exit 1
        #     fi

        #     # Inicialize e execute a aplicação Go
        #     echo "Inicializando e executando a aplicação Go..." &>> $LOG_FILE
        #     export GOCACHE="$HOME/.cache/go-build"
        #     go mod init sample-app-go &>> $LOG_FILE
        #     go mod tidy &>> $LOG_FILE
        #     go build &>> $LOG_FILE
        #     ./sample-app-go &>> $LOG_FILE
        #   } 2>&1 | tee -a $LOG_FILE

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [webapp-security-group, dev]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0