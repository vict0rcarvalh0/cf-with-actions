name: Pipeline CD - DeployBuddies

on:
  workflow_dispatch:
    # inputs:
    #   action-type:
    #     description: 'Type of action (release or rollback)'
    #     required: true
    #     default: 'release'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    
    - name: Deploy to AWS CloudFormation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: deploy-buddies-stack
        template: cloudformation/deploy-buddies-amazon-linux.yml
        no-fail-on-empty-changeset: "1"
        parameter-overrides: "DBPassword=postgresdb,EnvironmentType=dev,AWSAccessKeyId=${{ secrets.AWS_ACCESS_KEY_ID }},AWSSecretAccessKey=${{ secrets.AWS_SECRET_ACCESS_KEY }},AWSSessionToken=${{ secrets.AWS_SESSION_TOKEN }},AWSDefaultRegion=${{ secrets.AWS_DEFAULT_REGION }},Env=${{ secrets.ENV }}"
      id: cloudformation-deploy

    - name: Get EC2 instance IPs
      run: |
        instance_ids=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=deploy-buddies-stack" --query "Reservations[*].Instances[*].InstanceId" --output text)
        instance_ips=$(aws ec2 describe-instances --instance-ids $instance_ids --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
        IFS=' ' read -r -a ips_array <<< "$instance_ips"
        echo "INSTANCE_IP_1=${ips_array[0]}" >> $GITHUB_ENV
        echo "INSTANCE_IP_2=${ips_array[1]}" >> $GITHUB_ENV

    - name: Set up SSH Connection for Instance 1
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.INSTANCE_IP_1 }} > ~/.ssh/known_hosts

    - name: Set up SSH Connection for Instance 2
      run: |
        ssh-keyscan -H ${{ env.INSTANCE_IP_2 }} >> ~/.ssh/known_hosts

    - name: Set permissions for the script on Instance 1
      run: |
        ssh -i ~/.ssh/id_rsa ec2-user@${{ env.INSTANCE_IP_1 }} 'sudo chmod +x /home/ec2-user/script.sh'

    - name: Set permissions for the script on Instance 2
      run: |
        ssh -i ~/.ssh/id_rsa ec2-user@${{ env.INSTANCE_IP_2 }} 'sudo chmod +x /home/ec2-user/script.sh'

    - name: Access EC2 Instance 1 and execute script
      run: |
        ssh -i ~/.ssh/id_rsa ec2-user@${{ env.INSTANCE_IP_1 }} << 'EOF'
          chmod +x /home/ec2-user/script.sh
          /home/ec2-user/script.sh ${{ env.IMAGE_TAG }}
        EOF

    - name: Access EC2 Instance 2 and execute script
      run: |
        ssh -i ~/.ssh/id_rsa ec2-user@${{ env.INSTANCE_IP_2 }} << 'EOF'
          chmod +x /home/ec2-user/script.sh
          /home/ec2-user/script.sh ${{ env.IMAGE_TAG }}
        EOF
